// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract EmbagERC20Token {
    string public name = "EmbagERC20Token";
    string public symbol = "LDN";
    uint256 public totalSupply = 1000000;
    uint256 public decimals = 18;
    mapping (address => uint256) public balances;
    mapping (address => mapping (address => uint256)) public allowed;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }

    function mint(address to, uint256 amount) public {
        require(msg.sender == owner, "Only the owner can mint tokens");
        balances[to] += amount;
        emit Transfer(address(0), to, amount);
    }

    function transfer(address to, uint256 value) public {
        require(balances[msg.sender] >= value, "Insufficient balance");
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
    }

    function burn(uint256 value) public {
        require(balances[msg.sender] >= value, "Insufficient balance");
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, address(0), value);
    }

    function getBalance(address addr) public view returns (uint256) {
        return balances[addr];
    }
}
